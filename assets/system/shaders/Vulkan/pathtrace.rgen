#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "include/structs.glsl"
#include "include/random.glsl"

layout(set = 0, binding = 0, rgba32f) uniform image2D outTexture;
layout(set = 0, binding = 4, rgba32f) uniform image2D accumTexture;
layout(set = 0, binding = 1) uniform accelerationStructureEXT TLAS;

layout(push_constant) uniform pushConstants {
    mat4 invViewProj;
    vec4 cameraPosition;
    vec4 lightDir;
    uint frameCounter;
    uint bounces;
    float sunConeAngle;
};

layout(location = 0) rayPayloadEXT RayPayload payload;

vec3 aces(vec3 x) {
  const float a = 2.51;
  const float b = 0.03;
  const float c = 2.43;
  const float d = 0.59;
  const float e = 0.14;
  return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);
}

uint tea(uint val0, uint val1) {
  uint v0 = val0;
  uint v1 = val1;
  uint s0 = 0;

  for(uint n = 0; n < 16; n++) {
    s0 += 0x9e3779b9;
    v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
    v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
  }

  return v0;
}

void main() {
    ivec2 pixelCoord = ivec2(gl_LaunchIDEXT.xy);
    vec2 gid = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);

    //payload.rng = ((pixelCoord.y << 16) | pixelCoord.x) * (uint(0xffffffff) / (frameCounter + 1));
    payload.rng = tea(((pixelCoord.y << 16) | pixelCoord.x), frameCounter + 1);

    vec2 offsetGid = gid + pcg_vec3(payload.rng).xy;

    vec2 uv = offsetGid / vec2(gl_LaunchSizeEXT.xy);
    uv.y = 1.0 - uv.y;
    const vec2 clip = uv * 2.0 - 1.0;
    
    vec4 target = normalize(invViewProj * vec4(clip.x, clip.y, 0.0, 1.0));
    target /= target.w;

    payload.L = vec3(0.0);
    payload.beta = vec3(1.0);
    payload.rayPos = cameraPosition.xyz;
    payload.rayDir = normalize(target.xyz - payload.rayPos);
    payload.depth = 0;

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin = 0.001;
    float tMax = 10000.0;

    vec3 L = vec3(0.0);
    vec3 beta = vec3(1.0);

    for(; payload.depth < bounces; payload.depth++) {
        traceRayEXT(
            TLAS, 
            rayFlags, 0xFF,
            0, 0, 0, 
            payload.rayPos, tMin,
            payload.rayDir, tMax,
            0 // payload location 
        );

        // update the total radiance and throughput
        L += payload.L * beta;
        beta *= payload.beta;
    }

    if(frameCounter > 0) {
        vec4 stored = imageLoad(accumTexture, pixelCoord);
        vec4 accumulated = stored + vec4(L, 1.0);

        imageStore(accumTexture, pixelCoord, accumulated);

        vec3 color = aces(accumulated.rgb / frameCounter);
        vec3 retColor = pow(color, vec3(1/2.2));

        imageStore(outTexture, pixelCoord, vec4(retColor, 1.0));
    } 
    else {
        imageStore(accumTexture, pixelCoord, vec4(0.0));
        
        vec3 color = aces(L);
        vec3 retColor = pow(color, vec3(1/2.2));

        imageStore(outTexture, pixelCoord, vec4(retColor, 1.0));
    }
}
