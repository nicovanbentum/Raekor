print("Hello Chai..");

// var empty := scene.createEmpty();
// var mesh := scene.meshes.create(empty);
// var material = scene.materials.create(empty);
// material.loadFromDisk()

var mesh := scene.addMesh();

var width = 50.0f;
var height = 50.0f;
var scale = 5.0f;
var vertex_index = 0;

var sample_x = 0.0f;
var sample_y = 0.0f;

var colourData = Vector();

for(var y = 0.0f; y < width; ++y) {
    
    sample_x = 0.0f;

    for(var x = 0.0f; x < height; ++x) {

        var vertex = Vertex();
        var z = simplex(Vector2(sample_x, sample_y));

        z = 0.0f + ((7.0f - 0.0f) / (1.0f - -1.0f)) * (z - -1.0f);
        print(z);

        colourData.push_back(Vector3(0.0f, 1.0f - z , 1.0f - z));

        vertex.pos = Vector3(x, z, y);
        vertex.uv = Vector2(x / width, y / width);
        mesh.vertices.push_back(vertex);

        if(x < width - 1 && y < height -1) {
            mesh.indices.push_back(Triangle(vertex_index + 1, vertex_index, vertex_index + width +1));
            mesh.indices.push_back(Triangle(vertex_index + width, vertex_index + width + 1, vertex_index));
        }

        vertex_index += 1;

        sample_x += 0.05f;
    }
    sample_y += 0.05f;
}



for(var i = 0; i < mesh.indices.size(); ++i) {
    var triangle := mesh.indices[i];

    // calculate normal
    var v1 := mesh.vertices[triangle.p1].pos;
    var v2 := mesh.vertices[triangle.p2].pos;
    var v3 := mesh.vertices[triangle.p3].pos;

    var normal = normalize(cross(v2 - v1, v3 - v1));

    mesh.vertices[triangle.p1].normal = normal;
    mesh.vertices[triangle.p2].normal = normal;
    mesh.vertices[triangle.p3].normal = normal;
}

// for(var i = 0; i < mesh.indices.size(); ++i) {
//     var triangle := mesh.indices[i];


//     // do everything for p1
//     var normal = Vector3(0, 0, 0);

//     for(var j = 0; j < mesh.indices.size(); ++j) {
//         var triangle2 := mesh.indices[j];

//         if(triangle.p1 == triangle2.p1 || triangle.p1 == triangle2.p2 || triangle.p1 == triangle2.p3) {
//             var v1 := mesh.vertices[triangle.p1].pos;
//             var v2 := mesh.vertices[triangle.p2].pos;
//             var v3 := mesh.vertices[triangle.p3].pos;

//             normal += normalize(cross(v2 - v1, v3 - v1));
//         }
//     }

//     mesh.vertices[triangle.p1].normal = normalize(normal);
// }

mesh.generateAABB();
mesh.uploadIndices();
mesh.uploadVertices();