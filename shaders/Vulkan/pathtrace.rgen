#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "include/structs.glsl"
#include "include/random.glsl"

layout(set = 0, binding = 0, rgba32f) uniform image2D outTexture;
layout(set = 0, binding = 4, rgba32f) uniform image2D accumTexture;
layout(set = 0, binding = 1) uniform accelerationStructureEXT TLAS;

layout(push_constant) uniform pushConstants {
    mat4 invViewProj;
    vec4 cameraPosition;
    uint frameCounter;
};

layout(location = 0) rayPayloadEXT RayPayload payload;

vec3 aces(vec3 x) {
  const float a = 2.51;
  const float b = 0.03;
  const float c = 2.43;
  const float d = 0.59;
  const float e = 0.14;
  return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);
}

void main() {
    ivec2 pixelCoord = ivec2(gl_LaunchIDEXT.xy);
    vec2 id = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);

    payload.depth = 0;
    payload.rng = ((pixelCoord.y << 16) | pixelCoord.x) * (uint(0xffffffff) / (frameCounter + 1));
    payload.Lo = vec3(0.0);
    payload.K = vec3(1.0);

    vec3 result = vec3(
        pcg_float(payload.rng),
        pcg_float(payload.rng),
        pcg_float(payload.rng)
    );

    id += result.xy;

    vec2 uv = id / vec2(gl_LaunchSizeEXT.xy);
    uv.y = 1.0 - uv.y;
    const vec2 clip = uv * 2.0 - 1.0;
    
    vec4 target = normalize(invViewProj * vec4(clip.x, clip.y, 0.0, 1.0));
    target /= target.w;

    vec3 origin = cameraPosition.xyz;

    vec3 direction = normalize(target.xyz - origin);

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin = 0.01;
    float tMax = 1000.0;

    traceRayEXT(TLAS,
        rayFlags, 
        0xFF, 
        0, 
        0, 
        0,
        origin, 
        tMin, 
        direction, 
        tMax, 
        0 // payload location identifier
    );

    if (frameCounter == 0) {
        imageStore(accumTexture, pixelCoord, vec4(vec3(0.0), 1.0));
        
        vec3 color = aces(payload.Lo);
        vec3 retColor = pow(color, vec3(1/2.2));

        imageStore(outTexture, pixelCoord, vec4(retColor, 1.0));
    } 
    else if (frameCounter < uint(0xffffffff)) { 
        vec4 stored = imageLoad(accumTexture, pixelCoord);
        vec4 accumulated = stored + vec4(payload.Lo, 1.0);

        imageStore(accumTexture, pixelCoord, accumulated);

        vec3 color = aces(accumulated.rgb / frameCounter);
        vec3 retColor = pow(color, vec3(1/2.2));

        imageStore(outTexture, pixelCoord, vec4(retColor, 1.0));
    }


}